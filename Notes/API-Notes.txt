dotnet new webapi -n API --framework net7.0

creating class library

dotnet new classlib -n Core

dotnet new classlib -n Infrastructure

dotnet sln add Core/ **add to the project
dotnet sln add Infrastructure

dotnet add reference ../Infrastructure  **adding reference
dotnet restore **to refresh the solution

// Repository
-after creating a controller, you need to create an interface of the task of the controllers
-after creating the task, you need to create a class for this interface
-in order to implement this interface you need to inject code into the
program class
-call the interface into the controller

// Droping the database
dotnet ef database drop -p Infrastructure -s API

// Removing migrations
dotnet ef migrations remove -p Infrastructure -s API

// Generate migrations
dotnet ef migrations add InitialCreate -p Infrastructure -s API -o Data/Migrations

-after adding migrations, you need to have a config class to control the data type of the entities
-create another class in the config folder under Infrastructure/Data
-use IEntityTypeConfiguration<> to configure the entities
-after configuring the entities override the migrations into the storecontext

// Applying the migrations and creating the database at app startup
** here is the code
using var scope = app.Services.CreateScope();
var services = scope.ServiceProvider;
var context = services.GetRequiredService<StoreContext>();
var logger = services.GetRequiredService<ILogger<Program>>();
try
{
    await context.Database.MigrateAsync();
}
catch (Exception ex)
{
    logger.LogError(ex, "An error occured during migration");
}

// adding seed data
-create a class called StoreContextSeed in the Infrastructure/Data folder
** this is the code
public static async Task SeedAsync(StoreContext context)
        {
            if(!context.ProductBrands.Any())
            {
                var brandsData = File.ReadAllText("../Infrastructure/Data/SeedData/brands.json");
                var brands = JsonSerializer.Deserialize<List<ProductBrand>>(brandsData);
                context.ProductBrands.AddRange(brands);
            }

            if(!context.ProductTypes.Any())
            {
                var typesData = File.ReadAllText("../Infrastructure/Data/SeedData/types.json");
                var types = JsonSerializer.Deserialize<List<ProductType>>(typesData);
                context.ProductTypes.AddRange(types);
            }

            if(!context.Products.Any())
            {
                var productsData = File.ReadAllText("../Infrastructure/Data/SeedData/products.json");
                var products = JsonSerializer.Deserialize<List<Product>>(productsData);
                context.Products.AddRange(products);
            }

            if (context.ChangeTracker.HasChanges()) await context.SaveChangesAsync();
        }

** then add this code to the program class under the try catch block just paste it after the code in the
try catch block
await StoreContextSeed.SeedAsync(context);

**take note before you write this code there will be nullable error

// Adding the code to get the product brands and types
**just add more parameters in the IProductRepository here is the code

Task<IReadOnlyList<ProductBrand>> GetProductBrandsAsync();
Task<IReadOnlyList<ProductType>> GetProductTypesAsync();

**after that implement the interface into the productrepository
then add another block of code in the products controller,
here is the code:

**into the products Repository

public async Task<IReadOnlyList<ProductBrand>> GetProductBrandsAsync()
        {
            return await _context.ProductBrands.ToListAsync();
        }
public async Task<IReadOnlyList<ProductType>> GetProductTypesAsync()
        {
            return await _context.ProductTypes.ToListAsync();
        }

**into the controller
 [HttpGet("brands")]
        public async Task<ActionResult<IReadOnlyList<ProductBrand>>> GetProductBrands()
        {
            return Ok(await _repo.GetProductBrandsAsync());
        }

        [HttpGet("types")]
        public async Task<ActionResult<IReadOnlyList<ProductType>>> GetProductTypes()
        {
            return Ok(await _repo.GetProductTypesAsync());
        }

// Eager Loading of navigation properties
**just adding include on the query of the repositories thats it!!!

// Implementing the methods of generic Repository
**Add another class into the interface under the core/interface folder which is the:
IGenericRepository

**here is the Code:
public interface IGenericRepository<T> where T : BaseEntity
    {
        Task<T> GetByIdAsync(int id);
        Task<IReadOnlyList<T>> ListAllAsync();
        
    }

**after that create an implementation class under the Infrastructure/Data folder with a name of
GenericRepository

**here is the code:
public class GenericRepository<T> : IGenericRepository<T> where T : BaseEntity
    {
        private readonly StoreContext _context;
        public GenericRepository(StoreContext context)
        {
            _context = context;
        }

        public async Task<T> GetByIdAsync(int id)
        {
            return await _context.Set<T>().FindAsync(id);
        }

        public async Task<IReadOnlyList<T>> ListAllAsync()
        {
            return await _context.Set<T>().ToListAsync();
        }
    }

**and after that, you need add scope to the program class with a slightly different code
**here is the code:
builder.Services.AddScoped(typeof(IGenericRepository<>), typeof(GenericRepository<>));

**after that go to your controller where the your entities will be called,
then initialize every single entity from the parameters

**here is the code:

private readonly IGenericRepository<Product> _productsRepo;
        private readonly IGenericRepository<ProductBrand> _productBrand;
        private readonly IGenericRepository<ProductType> _productTypeRepo;
        
        public ProductsController(IGenericRepository<Product> productsRepo, 
        IGenericRepository<ProductBrand> productBrand, IGenericRepository<ProductType> productTypeRepo)
        {
            _productTypeRepo = productTypeRepo;
            _productBrand = productBrand;
            _productsRepo = productsRepo;
        }

**after that change all the code under your httpget methods

// Creating a specification class

**the purpose of this is to have an include statement in your query
**first you need to create an interface named ISpecification under tha Core/Specifications folder
**here is the code:
public interface ISpecification<T>
    {
        Expression<Func<T, bool>> Criteria { get; }
        List<Expression<Func<T, object>>> Includes { get; }
    }

**after that you need to create a BaseSpecification class under that Core/Specifications folder
**here is the code:
public class BaseSpecification<T> : ISpecification<T>

**and then implement the specification, create a constructor like this:
public BaseSpecification(Expression<Func<T, bool>> criteria)
        {
            Criteria = criteria;
        }

**and then code the methods like this:
public Expression<Func<T, bool>> Criteria { get; }

        public List<Expression<Func<T, object>>> Includes { get; } = 
        new List<Expression<Func<T, object>>>();

        protected void AddInclude(Expression<Func<T, object>> includeExpression)
        {
            Includes.Add(includeExpression);
        }

// Creating a specification evaluator

**Create a class under the Infrastructure/Data folder called SpecificationEvaluator
**the purpose of this is to add include statement into our GenericRepository Interface
**here is the code:
public class SpecificationEvaluator<TEntity>  where TEntity : BaseEntity
    {
        public static IQueryable<TEntity> GetQuery(IQueryable<TEntity> inputQuery, 
        ISpecification<TEntity> spec)
        {
            var query = inputQuery;

            if (spec.Criteria != null)
            {
                query = query.Where(spec.Criteria);
            }

            query = spec.Includes.Aggregate(query, (current, include) => current.Include(include));
            
            return query;
        }
    }

**after that you need to implement the SpecificationEvaluator into the IGenericRepository
inject it after the coded methods
**here is the code:
Task<T> GetEntityWithSpec(ISpecification<T> spec);
Task<IReadOnlyList<T>> ListAsync(ISpecification<T> spec);

// Implementing the Repository with specification methods
**go to GenericRepository and implement the added interface
**here is the code:
public async Task<T> GetEntityWithSpec(ISpecification<T> spec)
        {
            return await ApplySpecification(spec).FirstAsync();
        }

        public async Task<IReadOnlyList<T>> ListAsync(ISpecification<T> spec)
        {
            return await ApplySpecification(spec).ToListAsync();
        }

**and implement and IQueryable method after the implementation code
**here is the code:
private IQueryable<T> ApplySpecification(ISpecification<T> spec)
        {
            return SpecificationEvaluator<T>.GetQuery(_context.Set<T>().AsQueryable(), spec);
        }

// Using the specification methods in the controller
**this will implement the added IQueryable code in the GenericRepository
**first you need to create another class in the Core/Specifications folder with the name
ProductWithTypesAndBrandsSpecification
**implement the BaseSpecification class and declare the type T as Product, here is the code:
public class ProductWithTypesAndBrandsSpecification : BaseSpecification<Product>

**after that create a blank constructor on the BaseSpecification class,
this will remove the error ProductWithTypesAndBrandsSpecification
implementing the BaseSpecification Class

**create a constructor on the ProductWithTypesAndBrandsSpecification
with the code:
public ProductWithTypesAndBrandsSpecification()
        {
            AddInclude(x => x.ProductType);
            AddInclude(x => x.ProductBrand);
        }

**go to ProductsController and on the method declare the ProductWithTypesAndBrandsSpecification

**here is the code:

public async Task<ActionResult<List<Product>>> GetProducts()
        {
            var spec = new ProductWithTypesAndBrandsSpecification();
            
            var products = await _productsRepo.ListAsync(spec);
            return Ok(products);
        }
// Getting a single product with specification

**Generate the constructor with criteria into the ProductWithTypesAndBrandsSpecification

**here is the code:

public ProductWithTypesAndBrandsSpecification(int id) : 
        base(x => x.Id == id)
        {
            AddInclude(x => x.ProductType);
            AddInclude(x => x.ProductBrand);
        }

**implement it on the single query method on the ProductsController

**declare the class with the name spec and replace the return await with GetEntityWithSpec and GetProductTypesAsync
it with spec here is the sample code:

[HttpGet("{id}")]
        public async Task<ActionResult<Product>> GetProduct(int id)
        {
            var spec = new ProductWithTypesAndBrandsSpecification(id);

            return await _productsRepo.GetEntityWithSpec(spec);
        }

// Shaping the data to return with DTOs
**in this lesson we will flatten the return data from the api so that the frontend can
read the data more specifically

**create an object that we can use to return the data on the format that we wanted

**Create a class under the API/Dtos folder with the name ProductToReturnDto

**Copy the details of Product entity to the DTO
here is the code:

public class ProductToReturnDto
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public string PictureUrl { get; set; }
        public string ProductType { get; set; }
        public string ProductBrand { get; set; }
    }

**after that you can call it in the ProductsController

**here is the code:

        [HttpGet]
        public async Task<ActionResult<List<ProductToReturnDto>>> GetProducts()
        {
            var spec = new ProductWithTypesAndBrandsSpecification();
            
            var products = await _productsRepo.ListAsync(spec);
            return products.Select(product => new ProductToReturnDto
            {
                Id = product.Id,
                Name = product.Name,
                Description = product.Description,
                PictureUrl = product.PictureUrl,
                Price = product.Price,
                ProductBrand = product.ProductBrand.Name,
                ProductType = product.ProductType.Name
            }).ToList();
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<ProductToReturnDto>> GetProduct(int id)
        {
            var spec = new ProductWithTypesAndBrandsSpecification(id);

            var product = await _productsRepo.GetEntityWithSpec(spec);
            return new ProductToReturnDto
            {
                Id = product.Id,
                Name = product.Name,
                Description = product.Description,
                PictureUrl = product.PictureUrl,
                Price = product.Price,
                ProductBrand = product.ProductBrand.Name,
                ProductType = product.ProductType.Name
            };
        }

// Adding Auto Mapper to the project

**the purpose of this is to return DTO better

**install the tool in the nuget gallery: AutoMapper.Extensions.Microsoft.DependencyInjection

**create a new class under the API/Helpers with the name MappingProfiles

**create a blank constructor with the code:

public MappingProfiles()
    {
        CreateMap<Product, ProductToReturnDto>();
    }

**crate a service under the Program class with the code:

builder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());

**go to the ProductsController and apply the AutoMapper

**add mapper to the constructor: IMapper mapper
**initialize field from parameter

**apply the mapper with the code:

[HttpGet("{id}")]
        public async Task<ActionResult<ProductToReturnDto>> GetProduct(int id)
        {
            var spec = new ProductWithTypesAndBrandsSpecification(id);

            var product = await _productsRepo.GetEntityWithSpec(spec);
            return _mapper.Map<Product, ProductToReturnDto>(product);
        }

// Configuring AutoMapper profiles

**the purpose of this is to fix the strange result in postman

**add additional parameters to the MappingProfiles class with the code:

public MappingProfiles()
        {
            CreateMap<Product, ProductToReturnDto>()
            .ForMember(d => d.ProductBrand, o => o.MapFrom(s => s.ProductBrand.Name))
            .ForMember(d => d.ProductType, o => o.MapFrom(s => s.ProductType.Name));
        }

**return to the ProductsController and modify your code:

[HttpGet]
        public async Task<ActionResult<IReadOnlyList<ProductToReturnDto>>> GetProducts()
        {
            var spec = new ProductWithTypesAndBrandsSpecification();
            
            var products = await _productsRepo.ListAsync(spec);
            return Ok(_mapper.Map<IReadOnlyList<Product>, IReadOnlyList<ProductToReturnDto>>(products));
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<ProductToReturnDto>> GetProduct(int id)
        {
            var spec = new ProductWithTypesAndBrandsSpecification(id);

            var product = await _productsRepo.GetEntityWithSpec(spec);
            return _mapper.Map<Product, ProductToReturnDto>(product);
        }

// Adding a custom value resolver for AutoMapper

**go to appsettings.Development.json and add another property URL:
"ApiUrl": "https://localhost:5001/"

**add another class under the API/Helpers with the name ProductUrlResolver

**here is the code:

public class ProductUrlResolver : IValueResolver<Product, ProductToReturnDto, string>
    {
        private readonly IConfiguration _config;
        public ProductUrlResolver(IConfiguration config)
        {
            _config = config;
        }

        public string Resolve(Product source, ProductToReturnDto destination, string destMember, ResolutionContext context)
        {
            if (!string.IsNullOrEmpty(source.PictureUrl))
            {
                return _config["ApiUrl"] + source.PictureUrl;
            }

            return null;
        }
    }

**go to mapping profiles and add third configuration

**here is the code:

public class MappingProfiles : Profile
    {
        public MappingProfiles()
        {
            CreateMap<Product, ProductToReturnDto>()
            .ForMember(d => d.ProductBrand, o => o.MapFrom(s => s.ProductBrand.Name))
            .ForMember(d => d.ProductType, o => o.MapFrom(s => s.ProductType.Name))
            .ForMember(d => d.PictureUrl, o => o.MapFrom<ProductUrlResolver>());
        }
    }

// Serving static content from the API

**create a folder under the API with the name wwwroot and paste the image from the Student Assets
just copy the image folder

**serve static content go to program class

**this is the code:

app.UseStaticFiles();

// Creating a test controller for errors

**the purpose of this is to handle the errors

**create a BaseApiController in the API/Controllers

**remove the first 2 lines in the ProductsController

**create a controller called BuggyController in the API/Controllers

**here is the code:

public class BuggyController : BaseApiController
    {
        private readonly StoreContext _context;
        public BuggyController(StoreContext context)
        {
            _context = context;
        }

        [HttpGet("notfound")]
        public ActionResult GetNotFoundRequest()
        {
            var thing = _context.Products.Find(42);

            if (thing == null)
            {
                return NotFound();
            }
            return Ok();
        }

        [HttpGet("servererror")]
        public ActionResult GetServerError()
        {
            var thing = _context.Products.Find(42);

            var thingToReturn = thing.ToString();

            return Ok();
        }

        [HttpGet("badrequest")]
        public ActionResult GetBadRequest()
        {
            return BadRequest();
        }

        [HttpGet("badrequest/{id}")]
        public ActionResult GetNotFoundRequest(int id)
        {
            return Ok();
        }
    }

// Creating a consistent error response from the API

**to return a consistent error messages

**create a class on API/Errors called ApiResponse

**here is the code:

public ApiResponse(int statusCode, string message = null)
        {
            StatusCode = statusCode;
            Message = message ?? GetDefaultMessageForStatusCode(statusCode);
        }

        public int StatusCode { get; set; }
        public string Message { get; set; }

        private string GetDefaultMessageForStatusCode(int statusCode)
        {
            return statusCode switch
            {
                400 => "A bad request, you have made",
                401 => "Authorize, you are not",
                404 => "Resource found, it was not",
                500 => "Errors are the path to the dark side. Error leads to anger. Anger leads to hate" +
                "Hate leads to career change",
                _ => null
            };
        }

**after that write the code to the BuggyController with the code:

 [HttpGet("notfound")]
        public ActionResult GetNotFoundRequest()
        {
            var thing = _context.Products.Find(42);

            if (thing == null)
            {
                return NotFound(new ApiResponse(404));
            }
            return Ok();
        }
[HttpGet("badrequest")]
        public ActionResult GetBadRequest()
        {
            return BadRequest(new ApiResponse(400));
        }

// Adding a not found endpoint error handler

**create another controller called ErrorController

**here is the code:

[Route("errors/{code}")]
    public class ErrorController : BaseApiController
    {
        public IActionResult Error(int code)
        {
            return new ObjectResult(new ApiResponse(code));
        }
    }

**to make this code take effect inject some code in the middleware, go to program class

**here is the code:

app.UseStatusCodePagesWithReExecute("/errors/{0}");

// Creating Exception handler middleware

**the purpose of this is to return the error off null ref error

**create a new class under the Errors Folder named: ApiException with the code:

public class ApiException : ApiResponse
    {
        public ApiException(int statusCode, string message = null, string details = null) 
        : base(statusCode, message)
        {
            Details = details;
        }

        public string Details { get; set; }
    }

**create a middleware folder under the API and create a class named
ExceptionMiddleware

**create a constructor on the class containing : 

 public ExceptionMiddleware(RequestDelegate next, ILogger<ExceptionMiddleware> logger, 
        IHostEnvironment env)
        {
            _env = env;
            _logger = logger;
            _next = next;
        }

**after that initialize field from parameter

**Create a method
here is the code:

 public async Task InvokeAsync(HttpContext context)
        {
            try
            {
                await _next(context);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                context.Response.ContentType = "application/json";
                context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;

                var response = _env.IsDevelopment() 
                ? new ApiException((int)HttpStatusCode.InternalServerError, ex.Message, 
                ex.StackTrace.ToString())
                : new ApiException((int)HttpStatusCode.InternalServerError);

                var options = new JsonSerializerOptions{PropertyNamingPolicy = JsonNamingPolicy.CamelCase};

                var json = JsonSerializer.Serialize(response, options);

                await context.Response.WriteAsync(json);
            }
        }

// Improving the validation error responses

**create another class in the errors folder named: ApiValidationErrorResponse

**create a blank constructor with a static base of 400

**here is the code:

public class ApiValidationErrorResponse : ApiResponse
    {
        public ApiValidationErrorResponse() : base(400)
        {
        }

        public IEnumerable<string> Errors { get; set; }
    }

**after that create another service inside the program class

**here is the code:

builder.Services.Configure<ApiBehaviorOptions>(opt =>
{
    opt.InvalidModelStateResponseFactory = actionContext =>
    {
        var errors = actionContext.ModelState.Where(e => e.Value.Errors.Count > 0)
        .SelectMany(x => x.Value.Errors)
        .Select(x => x.ErrorMessage).ToArray();

        var errorResponse = new ApiValidationErrorResponse
        {
            Errors = errors
        };

        return new BadRequestObjectResult(errorResponse);
    };
});

Adding Swagger for documenting our API

**ignore the ErrorController and the WeatherForecastController just inject the code after 
the route: [ApiExplorerSettings(IgnoreApi = true)]

// Improving swagger documentation

**just add this block of code on the methods on a controller:

[ProducesResponseType(StatusCodes.Status200OK)]
[ProducesResponseType(typeof(ApiResponse), StatusCodes.Status404NotFound)]

// Cleaning up the startup class

**to make our program class more Clean

**make another class to extend the service

**create another class under the API/Extensions called ApplicationServicesExtensions

**make the class static: public static class ApplicationServicesExtensions

**write a static IServiceCollection called AddApplicationServices:

 public static IServiceCollection AddApplicationServices(this IServiceCollection services,
        IConfiguration config)

**close the method with a return value: return services;

**cut some code from the program class after the 
AddControllers services to before: var app = builder.Build();

**reformat the code using shift+alt+f

**select the all the builder code by selecting the text and then press ctrl+d to select the simmilar
texts

**go to program class and call the ApplicationServicesExtensions with a code:

builder.Services.AddApplicationServices(builder.Configuration);

// Adding a sorting specification class **this is the most important part on performance wise

**add another expression in the ISpecification interface:

Expression<Func<T, object>> OrderBy { get; }
Expression<Func<T, object>> OrderByDescending { get; }

**go to BaseSpecification class and implement the additional interface

**here is the code:

public Expression<Func<T, object>> OrderBy { get; private set;}

public Expression<Func<T, object>> OrderByDescending { get; private set;}

**add another protected void method:

protected void AddOrderBy(Expression<Func<T, object>> orderByExpression)
    {
        OrderBy = orderByExpression;
    }

protected void AddOrderByDescending(Expression<Func<T, object>> orderByDescExpression)
    {
        OrderByDescending = orderByDescExpression;
    }

**go to SpecificationEvaluator and add another if statement for OrderBy and OrderByDescending method:

if (spec.OrderBy != null)
    {
        query = query.OrderBy(spec.OrderBy);
    }

if (spec.OrderByDescending != null)
    {
        query = query.OrderByDescending(spec.OrderByDescending);
    }

**go to ProductsController and under the httpget method add a string sort on the method:

public async Task<ActionResult<IReadOnlyList<ProductToReturnDto>>> GetProducts(string sort)

**and pass it on the spec variable:

var spec = new ProductWithTypesAndBrandsSpecification(sort);

// Adding a sorting specification part 2

**go to the ProductWithTypesAndBrandsSpecification and add a string sort:

public ProductWithTypesAndBrandsSpecification(string sort)

**after that include the added function from the SpecificationEvaluator:

AddOrderBy(x => x.Name);

**in order to have a categorized sort you need to add a switch statement

**first you need to check if the sort string is not null:
 if (!string.IsNullOrEmpty(sort))

**after that add a switch statement under the if statement:

 switch (sort)
    {
        case "priceAsc":
        AddOrderBy(p => p.Price);
        break;

        case "priceDesc":
        AddOrderByDescending(p => p.Price);
        break;

        default:
        AddOrderBy(n => n.Name);
        break;
    }

// Working around the decimal problem in sqlite

**go to StoreContext class and add a code into the protected override method:

if (Database.ProviderName == "Microsoft.EntityFrameworkCore.Sqlite")
            {
                foreach (var entityType in modelBuilder.Model.GetEntityTypes())
                {
                    var properties = entityType.ClrType.GetProperties()
                    .Where(p => p.PropertyType == typeof(decimal));

                    foreach (var property in properties)
                    {
                        modelBuilder.Entity(entityType.Name).Property(property.Name)
                        .HasConversion<double>();
                    }
                }
            }

// Adding filtering functionality

**this task will filter the product brand and product type of the products

**first you need to add some additional parameters to the method:

public async Task<ActionResult<IReadOnlyList<ProductToReturnDto>>> GetProducts(string sort, int? brandId, int? typeId)

**then add it to the parameters to the spec variable:

var spec = new ProductWithTypesAndBrandsSpecification(sort, brandId, typeId);

**after that go to ProductWithTypesAndBrandsSpecification to also add some additional parameters to the method,
and add a base value:

public ProductWithTypesAndBrandsSpecification(string sort, int? brandId, int? typeId)
        : base(x => 
            (!brandId.HasValue || x.ProductBrandId == brandId) &&
            (!typeId.HasValue || x.ProductTypeId == typeId)


// Adding pagination **this is also very important performance wise

**go to ISpecification class and add additional lines for the pagination functionality:

int Take { get; }
int Skip { get; }
bool IsPagingEnabled { get; }

**after that proceed to the BaseSpecification class to implement this additional parameters:

 public int Take { get; private set;}

public int Skip { get; private set;}

public bool IsPagingEnabled { get; private set;}

**after that add additional protected void method on pagination:

protected void ApplyPaging(int skip, int take)
    {
        Skip = skip;
        Take = take;
        IsPagingEnabled = true;
    }

**after that proceed to SpecificationEvaluator to identify the query whether the paging is enabled:

if (spec.IsPagingEnabled)
    {
        query = query.Skip(spec.Skip).Take(spec.Take);
    }

// Adding pagination part 2

**create a class to store parameters

**create a class under the Core/Specifications folder called ProductSpecParams

**here is the code:

public class ProductSpecParams
    {
        private const int MaxPageSize = 50;
        public int PageIndex { get; set; } = 1;
        private int _pageSize = 6;
        public int PageSize
        {
            get => _pageSize;
            set => _pageSize = (value > MaxPageSize) ? MaxPageSize : value;
        }
        public int? BrandId { get; set; }
        public int? TypeId { get; set; }
        public string sort { get; set; }
    }
}

**go to ProductsController replace the parameter in the [HttpGet] with:

public async Task<ActionResult<IReadOnlyList<ProductToReturnDto>>> GetProducts(ProductSpecParams productParams)

**also the spec variable:

var spec = new ProductWithTypesAndBrandsSpecification(productParams);

**then go to ProductWithTypesAndBrandsSpecification and replace the parameters:

public ProductWithTypesAndBrandsSpecification(ProductSpecParams productParams)
    : base(x => 
        (!productParams.BrandId.HasValue || x.ProductBrandId == productParams.BrandId) &&
        (!productParams.TypeId.HasValue || x.ProductTypeId == productParams.TypeId)
    )

**change the errors to the parameters:

{
    AddInclude(x => x.ProductType);
    AddInclude(x => x.ProductBrand);
    AddOrderBy(x => x.Name);

    if (!string.IsNullOrEmpty(productParams.sort))
    {
        switch (productParams.sort)
        {
            case "priceAsc":
                AddOrderBy(p => p.Price);
                break;

            case "priceDesc":
                AddOrderByDescending(p => p.Price);
                break;

            default:
                AddOrderBy(n => n.Name);
                break;
        }
    }
}

public ProductWithTypesAndBrandsSpecification(int id) :
base(x => x.Id == id)
{
    AddInclude(x => x.ProductType);
    AddInclude(x => x.ProductBrand);
}

**then we need to tell api to look for the properties into the query:
**add [FromQuery] before the parameter:

public async Task<ActionResult<IReadOnlyList<ProductToReturnDto>>> GetProducts([FromQuery]ProductSpecParams productParams)

**add ApplyPaging to the ProductWithTypesAndBrandsSpecification method after the AddOrderBy method:

ApplyPaging(productParams.PageSize * (productParams.PageIndex - 1), productParams.PageSize);

// Adding Pagination part 3

**create a class under the API/Helpers folder called Pagination and make it a generic class:

public class Pagination<T> where T : class
    {
        public int PageIndex { get; set; }
        public int PageSize { get; set; }
        public int Count { get; set; }
        public IReadOnlyList<T> Data { get; set; }
    }

**go to IGenericRepository and add another interface:

Task<int> CountAsync(ISpecification<T> spec);

**implement this to the GenericRepository:

public async Task<int> CountAsync(ISpecification<T> spec)
    {
        return await ApplySpecification(spec).CountAsync();
    }

**create another class under Core/Specifications called ProductWithFiltersForCountSpecification

public class ProductWithFiltersForCountSpecification : BaseSpecification<Product>
    {
        public ProductWithFiltersForCountSpecification(ProductSpecParams productParams)
        : base(x => 
            (!productParams.BrandId.HasValue || x.ProductBrandId == productParams.BrandId) &&
            (!productParams.TypeId.HasValue || x.ProductTypeId == productParams.TypeId)
        )
        {
        }
    }

**go to ProductsController to add these parameters:

 public async Task<ActionResult<Pagination<ProductToReturnDto>>> GetProducts([FromQuery]ProductSpecParams productParams)
        {
            var spec = new ProductWithTypesAndBrandsSpecification(productParams);

            var countSpec = new ProductWithFiltersForCountSpecification(productParams);

            var totalItems = await _productsRepo.CountAsync(countSpec);

            var products = await _productsRepo.ListAsync(spec);
            
            var data = _mapper.Map<IReadOnlyList<Product>, IReadOnlyList<ProductToReturnDto>>(products);
            
            return Ok(new Pagination<ProductToReturnDto>(productParams.PageIndex, productParams.PageSize, totalItems, data));
        }

**make sure to create a constructor on the Pagination class:

public Pagination(int pageIndex, int pageSize, int count, IReadOnlyList<T> data)
        {
            Data = data;
            Count = count;
            PageSize = pageSize;
            PageIndex = pageIndex;
        }

        public int PageIndex { get; set; }
        public int PageSize { get; set; }
        public int Count { get; set; }
        public IReadOnlyList<T> Data { get; set; }

// Adding a search functionality

**go to ProductSpecParams add another field:

private string _search;
        public string Search
        {
            get => _search;
            set => _search = value.ToLower();
        }

**go to ProductWithTypesAndBrandsSpecification and another base parameter:

(string.IsNullOrEmpty(productParams.Search) || x.Name.ToLower().Contains(productParams.Search)) &&

**also go to ProductWithFiltersForCountSpecification and add another base to the parameter:

(string.IsNullOrEmpty(productParams.Search) || x.Name.ToLower().Contains(productParams.Search)) &&


// Adding CORS Support to the API

**go to ApplicationServicesExtensions under the API/Extensions:

 services.AddCors(opt =>
    {
        opt.AddPolicy("CorsPolicy", policy =>
        {
            policy.AllowAnyHeader().AllowAnyMethod().WithOrigins("https://localhost:4200");
        });
    });

**after that go to program class to add cors functionality:


