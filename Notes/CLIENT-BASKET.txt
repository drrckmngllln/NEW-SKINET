// Creating the basket module

**open cli:

**create a basket module:

ng g m basket

**for basket routing:

ng g m basket/basket-routing --flat

**create a component:

ng g c basket/basket --flat --skip-tests

**create a service:

ng g s basket/basket --skip-tests

**go to app-routing.module.ts and add route:

{path: 'basket', loadChildren: () => import('./basket/basket.module').then(m => m.BasketModule)},

**go to basket-touting.module.ts:

const routes: Routes = [
  {path: '', component: BasketComponent}
]

@NgModule({
  declarations: [],
  imports: [
    RouterModule.forChild(routes)
  ],
  exports: [
    RouterModule
  ]
})
export class BasketRoutingModule { }

**go to basket.module.ts and import the BasketRoutingModule:

@NgModule({
  declarations: [
    BasketComponent
  ],
  imports: [
    CommonModule,
    BasketRoutingModule
  ]
})
export class BasketModule { }

**go to nav-bar.component.html:

<a routerLink="/basket" class="position-relative">

**test the page

//creating the basket types

**create a basket in the postman

**copy the json file in the postman go to json to ts and convert the json file to ts

**create a new file in the model called basket.ts:

import * as cuid from "cuid"

export interface BasketItem {
    id: number
    productName: string
    price: number
    quantity: number
    pictureUrl: string
    brand: string
    type: string
}

export interface Basket {
    id: string
    items: BasketItem[]
}

export class Basket implements Basket {
    id = cuid();
    items: BasketItem[] = [];
}

// Basket service methods

**go to basket service and enter the basket functionality:

export class BasketService {
  baseUrl = environment.apiUrl;
  private basketSource = new BehaviorSubject<Basket | null>(null);
  basketSource$ = this.basketSource.asObservable();

  constructor(private http: HttpClient) { }

  getBasket(id: string) {
    return this.http.get<Basket>(this.baseUrl + 'basket?id=' + id).subscribe({
      next: basket => this.basketSource.next(basket)
    })
  }

  setBasket(basket: Basket) {
    return this.http.post<Basket>(this.baseUrl + 'basket', basket).subscribe({
      next: basket => this.basketSource.next(basket)
    })
  }

  getCurrentBasketValue() {
    return this.basketSource.value;
  }
}

//Adding an item to the basket service method

**create a crud operations in the basket.service.ts:

addItemToBasket(item: Product, quantity = 1) {
    const itemToAdd = this.mapProductItemToBasketItem(item); 
    const basket = this.getCurrentBasketValue() ?? this.createBasket();
    basket.items = this.addOrUpdateItem(basket.items, itemToAdd, quantity);
    this.setBasket(basket);
  }

  private addOrUpdateItem(items: BasketItem[], itemToAdd: BasketItem, quantity: number): BasketItem[] {
    const item = items.find(x => x.id === itemToAdd.id);
    if (item) item.quantity += quantity;
    else{
      itemToAdd.quantity = quantity;
      items.push(itemToAdd);
    }
    return items;
  }

  private createBasket(): Basket {
    const basket = new Basket();
    localStorage.setItem('basket_id', basket.id);
    return basket;
  }

  private mapProductItemToBasketItem(item: Product) : BasketItem {
    return {
      id: item.id,
      productName: item.name,
      price: item.price,
      quantity: 0,
      pictureUrl: item.pictureUrl,
      brand: item.productBrand,
      type: item.productType
    }
  }

// Adding the add item to basket in the component method

**go to product-item.component.ts:

export class ProductItemComponent {
  @Input() product?: Product;

  constructor(private basketService: BasketService) { }

  addItemToBasket() {
    this.product && this.basketService.addItemToBasket(this.product);
  }

**go to product-item.component.html and add a click event

<button (click)="addItemToBasket()" class="btn btn-primary me-2"><i class="fa fa-shopping-cart"></i></button>

**try to see the redis commander: localhost:8081 and see the saved database

// Persisting the basket on startup

**go to app.component.ts and use the component to load the localStorage:

export class AppComponent implements OnInit {
  title = 'Skinet';

  constructor(private basketService: BasketService) { }

  ngOnInit(): void {
    const basketId = localStorage.getItem('basket_id');
    if (basketId) this.basketService.getBasket(basketId);
  }

}

// Displaying the basket item count in the nav bar

**go to nav-bar-component.ts and inject:

constructor(public basketService: BasketService) { }

  getCount(items: BasketItem[]){
    return items.reduce((sum, item) => sum + item.quantity, 0);
  }

**go to nav-bar.component.html:

<div class="cart-no" *ngIf="(basketService.basketSource$ | async) as basket">
  {{ getCount(basket.items) }}
</div>

// Styling the basket page

go to: basket.component.ts:

export class BasketComponent {

  constructor(public basketService: BasketService) { }
  

}

then go to basket.component.html:

<div class="container mt-5">
    <div class="" *ngIf="(basketService.basketSource$ | async) === null">
        <p>There are no items in your basket</p>
    </div>

    <ng-container *ngIf="(basketService.basketSource$ | async) as basket">
        <div class="container">
            <div class="row">
                <div class="table-responsive">
                    <table class="table">
                        <thead class="bg-light text-uppercase">
                            <tr>
                                <th><div class="py-2">Product</div></th>
                                <th><div class="py-2">Price</div></th>
                                <th><div class="py-2">Quantity</div></th>
                                <th><div class="py-2">Total</div></th>
                                <th><div class="py-2">Remove</div></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr *ngFor="let item of basket.items">
                                <th>
                                    <div class="p-2 d-inline-block">
                                        <img src="{{ item.pictureUrl }}" 
                                            alt="{{ item.productName }}" 
                                            class="img-fuid" 
                                            style="max-height: 50px;"
                                        >
                                        <div class="ms-3 inline-block align-middle">
                                            <h5 class="mb-0">
                                                <a href="" class="text-dark text-decoration-none">
                                                    {{ item.productName }}
                                                </a>
                                            </h5>
                                            <span class="text-muted fst-italic">
                                                Type: {{ item.type }}
                                            </span>
                                        </div>
                                    </div>
                                </th>
                                <td class="align-middle"><strong>{{ item.price | currency }}</strong></td>
                                <td class="align-middle">
                                    <div class="d-flex align-items-center">
                                        <i class="fa fa-minus-circle text-warning me-2" style="cursor: pointer; font-size: 2em;"></i>
                                        <strong style="font-size: 1.5em;">{{ item.quantity }}</strong>
                                        <i class="fa fa-plus-circle text-warning mx-2" style="cursor: pointer; font-size: 2em;"></i>
                                    </div>
                                </td>
                                <td class="align-middle"><strong>{{ item.price * item.quantity | currency }}</strong></td>
                                <td class="align-middle">
                                    <a class="text-danger">
                                        <i class="fa fa-trash" style="font-size: 2em; cursor: pointer;"></i>
                                    </a>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </ng-container>
</div>

