// Creating an error component for testing the error responses

**create a component for errors:

ng g c core/test-error --skip-tests

**go to app-routing.module.ts and add routing:

{path: 'test-error', component: TestErrorComponent},

**go to nav-bar.component.html edit the contact to Error:
<a class="p-2" routerLink="/test-error" routerLinkActive="active">Errors</a>

**create a folder called environment and add a file called:
environment.prod.ts with the code: 

export const environment = {
    production: true,
    apiUrl: 'api/'
};

environment.ts with the code:

export const environment = {
    production: false,
    apiUrl: 'https://localhost:5001/api/'
};

**then proceed to test-error.component.ts:

export class TestErrorComponent {
  baseUrl = environment.apiUrl;

  constructor(private http: HttpClient) { }

  get404Error(){
    this.http.get(this.baseUrl + 'product/42').subscribe({
      next: response => console.log(response),
      error: error => console.log(error)
    })
  }

  get500Error(){
    this.http.get(this.baseUrl + 'buggy/servererror').subscribe({
      next: response => console.log(response),
      error: error => console.log(error)
    })
  }

  get400Error(){
    this.http.get(this.baseUrl + 'buggy/badrequest').subscribe({
      next: response => console.log(response),
      error: error => console.log(error)
    })
  }

  get400ValidationError(){
    this.http.get(this.baseUrl + 'products/fortytwo').subscribe({
      next: response => console.log(response),
      error: error => console.log(error)
    })
  }
}


**then create a template in test-error.component.html:

<div class="container mt-5">
    <button (click)="get500Error()" class="btn btn-outline-primary me-3">Test 500 Error</button>
    <button (click)="get404Error()" class="btn btn-outline-primary me-3">Test 404 Error</button>
    <button (click)="get400Error()" class="btn btn-outline-primary me-3">Test 400 Error</button>
    <button (click)="get400ValidationError()" class="btn btn-outline-primary me-3">Test 400 Validation Error</button>
</div>

// Creating additional error components

create a component for not-found and server-error:

ng g c core/not-found --skip-tests

ng g c core/server-error --skip-tests

**go to app-routing.module.ts and add additional routes for the 2 component that was created:

{path: 'not-found', component: NotFoundComponent},
{path: 'server-error', component: ServerErrorComponent},

*go to the not-found.component.html:

<div class="container mt-5">
    <h1>Not Found</h1>
</div>

**go to the server-error.component.html:

<div class="container mt-5">
    <h1>Server Error</h1>
</div>

// Using the http interceptor to catch errors

**open terminal and create an interceptor:

ng g interceptor core/interceptors/error --skip-tests

**go to error.interceptor.ts: 

@Injectable()
export class ErrorInterceptor implements HttpInterceptor {

  constructor(private router: Router) { }

  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {
    return next.handle(request).pipe(
      catchError((error: HttpErrorResponse) => {
        if (error) {
          if (error.status === 404) {
            this.router.navigateByUrl('/not-found');
          };
          if (error.status === 500) {
            this.router.navigateByUrl('/server-error');
          }
        }
        return throwError(() => new Error(error.message));
      })
    )
  }
}

go to app.module.ts insert into provide:

providers: [
    {provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true}
  ],

//Adding toast notifications

**go to ngx toastr in google choose the github page

**install the package open the terminal:

npm install ngx-toastr@15

**copy the stylesheet into the style array in the angular.json

**paste it also to the style.scss:

@import "node_modules/ngx-toastr/toastr.css";

**go to app.module.ts and import:

ToastrModule.forRoot({
    positionClass: 'toast-bottom-right',
    preventDuplicates: true
})

**go to error.interceptor.ts and inject it:

@Injectable()
export class ErrorInterceptor implements HttpInterceptor {

  constructor(private router: Router, private toastr: ToastrService) { }

  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {
    return next.handle(request).pipe(
      catchError((error: HttpErrorResponse) => {
        if (error) {
          if (error.status === 400){
            this.toastr.error(error.error.message, error.status.toString())
          }
          if (error.status === 401){
            this.toastr.error(error.error.message, error.status.toString())
          }
          if (error.status === 404) {
            this.router.navigateByUrl('/not-found');
          };
          if (error.status === 500) {
            this.router.navigateByUrl('/server-error');
          }
        }
        return throwError(() => new Error(error.message));
      })
    )
  }
}

// Handling validation errors

**go to error.interceptor.ts:

if (error) {
    if (error.status === 400){
    if (error.error.errors){
        throw error.error;
    }
    else {
        this.toastr.error(error.error.message, error.status.toString())
    }
    }
    if (error.status === 401){
    this.toastr.error(error.error.message, error.status.toString())
    }
    if (error.status === 404) {
    this.router.navigateByUrl('/not-found');
    };
    if (error.status === 500) {
    this.router.navigateByUrl('/server-error');
    }
}

**go to test-error.component.ts and create another property:

validationErrors: string[] = [];

**then inject another parameters in the error log in get400ValidationError:

get400ValidationError(){
    this.http.get(this.baseUrl + 'products/fortytwo').subscribe({
      next: response => console.log(response),
      error: error => {
        console.log(error),
        this.validationErrors = error.errors;
      }
    })
  }

then go to test-error.component.html to display to the page:

<div class="row mt-5" *ngIf="validationErrors.length > 0">
    <ul class="text-danger">
        <li *ngFor="let error of validationErrors">{{ error }}</li>
    </ul>
</div>

// Improving the internal server error component

**go to error.interceptor.ts add some code into the error 500 if statement:

if (error.status === 500) {
    const navigationExtras: NavigationExtras = { state: { error: error.error } }
    this.router.navigateByUrl('/server-error', navigationExtras);
  }

**go to server-error.component.ts and add some code:

export class ServerErrorComponent {
  error: any;

  constructor(private router: Router) { 
    const navigation = this.router.getCurrentNavigation();
    this.error = navigation?.extras?.state?.['error'];
  }
}

**and design the server-error.component.html:

<div class="container mt-5">
    <h4>Internal server-error - refreshing the page will make the error dissapear</h4>
    <ng-container>
        <h5 class="text-danger">Error: {{ error.message }}</h5>
        <p class="font-weight-bold">this error comes from server - not angular</p>
        <p>What to do next?</p>
        <ol>
            <li>Check the network tab in chrome dev tools</li>
            <li>Reproduce the request in postman - if the same error occurs then definitely not angular!</li>
        </ol>
        <h5>Stack trace</h5>
        <code class="mt-5" style="background-color: whitesmoke;">{{ error.details }}</code>
    </ng-container>
</div>

// Adding a section header

**open terminal under the client folder and create a component:

ng g c core/section-header --skip-tests

**go to section-header.component.html and code the format of the section header:

<section class="py-5" style="margin-top: 105px; background-color: #f5f5f5;">
    <div class="container">
        <div class="row d-flex align-items-center">
            <div class="col-9">
                <h1>Tittle goes here</h1>
            </div>
            <div class="col-3">
                <nav>
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="#">Home</a></li>
                        <li class="breadcrumb-item active" aria-current="page">Library</li>
                    </ol>
                </nav>

            </div>
        </div>
    </div>
</section>

**go to app.component.html but first export the component to the core.module.ts: SectionHeaderComponent
and call the section-header:

<app-section-header></app-section-header>

// Adding breadcrumbs

**install a third party tool for breadcrumbs called xng-breadcrumb

**search xng-breadcrumb in the google:

npm install xng-breadcrumb@9

**take note that the angular 15 is not compatible with the latest breadcrumb npm so we need to install the version 9

**according to the source:

--for angular 12 use version 6.8.3
--for angular 13, use xng-breadcrumb 7.2.0
--for angular 14, use xng-breadcrumb 8.0.2
--for angular 15, use xng-breadcrumb 9.0.0

**import the BreadcrumbModule itno the core.module.ts

**go to section-header.component.html and replace the nav tag with: <xng-breadcrumb>

**to make sure that the home is displayed go to app-routing.module.ts:

{path: '', component: HomeComponent, data: {breadcrumb: 'Home'}},

**to fix the title case issue go to section-header.component.html:

<xng-breadcrumb>
    <ng-container *xngBreadcrumbItem="let breadcrumb">
        {{ breadcrumb | titlecase }}
    </ng-container>
</xng-breadcrumb>

// Using the breadcrumb ToastrService

**go to shop-routing.module.ts:

{path: ':id', component: ProductDetailsComponent, data: {breadcrumb: {alias: 'productDetails'}}},

**go to product-details.component.ts and add another parameter to the constructor:

constructor(private shopService: ShopService, private activatedRoute: ActivatedRoute, private bcService: BreadcrumbService) { }

**add additional statement to the loadProduct Method:

loadProduct() {
    const id = this.activatedRoute.snapshot.paramMap.get('id')
    if (id) this.shopService.getProduct(+id).subscribe({
      next: product =>{ 
        this.product = product;
        this.bcService.set('@productDetails', product.name);
      },
      error: error => console.log(error)
    })
  }

**create a styling into our breadcrumb trail

**go to style.scss:

label.xng-breadcrumb-trail {
    color: orange;
}

// Setting the section header title from the breadcrumb

**go to section-header.component.ts and create a constructor:

constructor(public bcService: BreadcrumbService) { 
   
  }

**go to section-header.component.html:

<ng-container *ngIf="$any(bcService.breadcrumbs$ | async) as breadcrumbs">
    <section *ngIf="breadcrumbs[breadcrumbs.length-1].label !== 'Home'" class="py-5" style="margin-top: 105px; background-color: #f5f5f5;">
        <div class="container">
            <div class="row d-flex align-items-center">
                <div class="col-9">
                    <h1>{{ breadcrumbs[breadcrumbs.length-1].label | titlecase }}</h1>
                </div>
                <div class="col-3">
                    <xng-breadcrumb>
                        <ng-container *xngBreadcrumbItem="let breadcrumb">
                            {{ breadcrumb | titlecase }}
                        </ng-container>
                    </xng-breadcrumb>
                </div>
            </div>
        </div>
    </section>
</ng-container>


// Styling the product items

**go to app.component.html and remove the spacing:

<div class="container">
    <router-outlet></router-outlet>
</div>

**go to product-item.component.html and get the buttons overlayed on the image and make animation:

<div class="card shadow-sm h-100" *ngIf="product">
    
    <div class="image position-relative" style="cursor: pointer;">
        <img src="{{ product.pictureUrl }}" alt="{{ product.name }}" class="img-fluid bg-info">
        <div class="d-flex align-items-center justify-content-center hover-overlay">
            <button class="btn btn-primary me-2"><i class="fa fa-shopping-cart"></i></button>
            <button routerLink="/shop/{{ product.id }}" class="btn btn-primary">View</button>
        </div>
    </div>

    <div class="card-body d-flex flex-column">
        <a href="" class="tex-decoration-none">
            <h6 class="text-uppercase">
                {{ product.name }}
            </h6>
        </a>
        <span class="mb-2">{{ product.price | currency }}</span>
    </div>
</div>

**after that go to product-item.component.scss and style and animate the page:

.image :hover {
    opacity: 1;
    & button {
        transform: none;
        opacity: 1;
    }
}

.hover-overlay {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    background: rgba(255,255,255,0.5);
    opacity: 0;
    transition: all 0.5s;

    & button {
        z-index: 1000;
        transition: all 0.5s;
    }

    & button:first-of-type {
        transform: translateX(-20px);
    }

    & button:last-of-type {
        transform: translateX(20px);
    }
}

**go to product-details.component.html and adjust the price size:

<p style="font-size: 2em;">{{ product.price | currency }}</p>

// changing the bootstrap theme

**visit bootswatch.com to choose options of you themes of your system

**open the terminal and make sure you are in your client folder:

npm install bootswatch

**and open up angular.json and find the style:

"node_modules/bootswatch/dist/united/bootstrap.min.css",

**make sure to reset the app for the theme to take effect

//Adding loading indicators

**create a new interceptor:

ng g interceptor core/interceptors/loading --skip-tests

**open the created interceptor and add a fake delay:

intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {
    this.busyService.busy();
    return next.handle(request).pipe(
      delay(1000),
      finalize(() => this.busyService.idle())
    )
  }

**open up app.module.ts to inject the interceptor under the providers:

{provide: HTTP_INTERCEPTORS, useClass: LoadingInterceptor, multi: true}

**go to google and search the ngx spinner and install the dependency

**open up the terminal and install the dependency:

npm install ngx-spinner@15

**go to angular.json and add style in the styles array:

"node_modules/ngx-spinner/animations/timer.css",

**go to core.module.ts import and export the NgxSpinnerModule

**go to app.component.html and add it to the top:

<ngx-spinner type="timer">
    <h3>Loading...</h3>
</ngx-spinner>

**create a service:

ng g s core/services/busy --skip-tests

**go to that service and write this code:

export class BusyService {
  busyRequestCount = 0;

  constructor(private spinnerService: NgxSpinnerService) { }

  busy(){
    this.busyRequestCount++;
    this.spinnerService.show(undefined, {
      type: 'timer',
      bdColor: 'rgba(255,255,255,0.7)',
      color: '#333333'
    });
  }

  idle(){
    this.busyRequestCount--;
    if (this.busyRequestCount <= 0){
      this.busyRequestCount = 0;
      this.spinnerService.hide();
    }
  }
}

**go back to the loading.interceptor.ts and write this code:

export class LoadingInterceptor implements HttpInterceptor {

  constructor(private busyService: BusyService) {}

  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {
    this.busyService.busy();
    return next.handle(request).pipe(
      delay(1000),
      finalize(() => this.busyService.idle())
    )
  }
}

**restart the angular app to take effect the changes

//cleaning up loading issues

**deal with section header, to to product-details.component.ts and add additional code to the constructor:

 constructor(private shopService: ShopService, private activatedRoute: ActivatedRoute, private bcService: BreadcrumbService) { 
    this.bcService.set('@productDetails', ' ')
  }

**go to shop.component.html and add additional condition:

<div class="row" *ngIf="types.length > 0 && brands.length > 0">

**add additional spacing to the section-header.component.html:

<section *ngIf="breadcrumbs[breadcrumbs.length-1].label !== 'Home'" class="py-5 mb-3" style="margin-top: 105px; background-color: #f5f5f5;">

// Adding the home page content

**go to angular bootsrap and choose carousel as image

**go to shared.module.ts and import and export the CarouselModule

**go to home.module.ts and import the SharedModule

**go to home.component.html:

<carousel [isAnimated]="true">
    <slide>
        <img src="assets/images/hero1.jpg" alt="slide" style="display: block; width: 100%;">
    </slide>
    <slide>
        <img src="assets/images/hero2.jpg" alt="slide" style="display: block; width: 100%;">
    </slide>
    <slide>
        <img src="assets/images/hero3.jpg" alt="slide" style="display: block; width: 100%;">
    </slide>
</carousel>
<section class="featured">
    <div class="d-flex justify-content-center pt-4">
        <h1>Welcome to the Shop!</h1>
    </div>
</section>

**go to app.component.html:

<ngx-spinner type="timer">
    <h3>Loading...</h3>
</ngx-spinner>
<app-nav-bar></app-nav-bar>
<app-section-header></app-section-header>

<router-outlet></router-outlet>


**go to home.component.scss:

.featured {
    height: 250px;

}

img {
    object-fit: cover;
    height: 600px;
    width: 100%;
}

